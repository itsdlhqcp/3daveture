<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Car Color Changer</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #43CBFF 10%, #9708CC 100%);
        }

        .car-viewer {
            background: #fff;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 600px;
            width: 100%;
        }

        .title {
            font-size: 24px;
            font-weight: 600;
            color: #333;
            margin-bottom: 20px;
        }

        .car-display {
            position: relative;
            height: 400px;
            margin-bottom: 30px;
            border-radius: 15px;
            overflow: hidden;
            background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
        }

        #car-canvas {
            width: 100%;
            height: 100%;
            border-radius: 15px;
        }

        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 18px;
            color: #666;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            gap: 20px;
        }

        .car-selection {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .car-label {
            font-size: 16px;
            font-weight: 500;
            color: #333;
        }

        .car-buttons {
            display: flex;
            gap: 10px;
        }

        .car-btn {
            padding: 8px 16px;
            border: 2px solid #ddd;
            border-radius: 20px;
            background: #fff;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            color: #666;
        }

        .car-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .car-btn.active {
            background: #0071C7;
            color: white;
            border-color: #0071C7;
        }

        .color-selection {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }

        .color-label {
            font-size: 16px;
            font-weight: 500;
            color: #333;
        }

        .color-circles {
            display: flex;
            gap: 16px;
        }

        .circle {
            height: 30px;
            width: 30px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .circle:hover {
            transform: scale(1.1);
        }

        .circle.blue {
            background: #0071C7;
        }

        .circle.red {
            background: #FF4444;
        }

        .circle.yellow {
            background: #F5DA00;
        }

        .circle.green {
            background: #4CAF50;
        }

        .circle.black {
            background: #333333;
        }

        .circle.white {
            background: #FFFFFF;
            border: 2px solid #ddd;
        }

        .circle.active {
            box-shadow: 0 0 0 3px #fff, 0 0 0 6px currentColor;
            transform: scale(1.2);
        }

        .circle.blue.active { color: #0071C7; }
        .circle.red.active { color: #FF4444; }
        .circle.yellow.active { color: #F5DA00; }
        .circle.green.active { color: #4CAF50; }
        .circle.black.active { color: #333333; }
        .circle.white.active { color: #999999; }

        .info-text {
            font-size: 14px;
            color: #666;
            margin-top: 15px;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="car-viewer">
        <h2 class="title">3D Car Showroom</h2>
        
        <div class="car-display">
            <canvas id="car-canvas"></canvas>
            <div class="loading" id="loading">Loading 3D model...</div>
        </div>

        <div class="controls">
            <div class="car-selection">
                <span class="car-label">Car Model:</span>
                <div class="car-buttons">
                    <button class="car-btn active" data-car="car1">Car 1</button>
                    <button class="car-btn" data-car="car2">Car 2</button>
                </div>
            </div>

            <div class="color-selection">
                <span class="color-label">Paint:</span>
                <div class="color-circles">
                    <span class="circle blue active" data-color="blue"></span>
                    <span class="circle red" data-color="red"></span>
                    <span class="circle yellow" data-color="yellow"></span>
                    <span class="circle green" data-color="green"></span>
                    <span class="circle black" data-color="black"></span>
                    <span class="circle white" data-color="white"></span>
                </div>
            </div>
        </div>

        <p class="info-text">Click and drag to rotate â€¢ Scroll to zoom</p>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script>
        class Car3DViewer {
            constructor() {
                this.scene = null;
                this.camera = null;
                this.renderer = null;
                this.carModel = null;
                this.controls = null;
                this.currentCar = 'car1';
                this.currentColor = 'blue';
                this.isLoading = false;
                
                // Color mappings
                this.colorMap = {
                    blue: 0x0071C7,
                    red: 0xFF4444,
                    yellow: 0xF5DA00,
                    green: 0x4CAF50,
                    black: 0x333333,
                    white: 0xFFFFFF
                };

                this.init();
                this.setupEventListeners();
                this.loadCarModel();
            }

            init() {
                const canvas = document.getElementById('car-canvas');
                const container = canvas.parentElement;

                // Scene setup
                this.scene = new THREE.Scene();
                this.scene.background = new THREE.Color(0xf0f0f0);

                // Camera setup
                this.camera = new THREE.PerspectiveCamera(
                    75, 
                    container.clientWidth / container.clientHeight, 
                    0.1, 
                    1000
                );
                this.camera.position.set(5, 2, 5);

                // Renderer setup
                this.renderer = new THREE.WebGLRenderer({ 
                    canvas: canvas, 
                    antialias: true 
                });
                this.renderer.setSize(container.clientWidth, container.clientHeight);
                this.renderer.shadowMap.enabled = true;
                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;

                // Lighting
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
                this.scene.add(ambientLight);

                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
                directionalLight.position.set(10, 10, 5);
                directionalLight.castShadow = true;
                this.scene.add(directionalLight);

                // Basic orbit controls (manual implementation)
                this.setupControls();

                // Handle window resize
                window.addEventListener('resize', () => this.onWindowResize());

                // Start animation loop
                this.animate();
            }

            setupControls() {
                let isMouseDown = false;
                let mouseX = 0;
                let mouseY = 0;
                let targetRotationX = 0;
                let targetRotationY = 0;
                let rotationX = 0;
                let rotationY = 0;

                const canvas = this.renderer.domElement;

                canvas.addEventListener('mousedown', (e) => {
                    isMouseDown = true;
                    mouseX = e.clientX;
                    mouseY = e.clientY;
                });

                canvas.addEventListener('mousemove', (e) => {
                    if (!isMouseDown) return;

                    const deltaX = e.clientX - mouseX;
                    const deltaY = e.clientY - mouseY;

                    targetRotationY += deltaX * 0.01;
                    targetRotationX += deltaY * 0.01;

                    mouseX = e.clientX;
                    mouseY = e.clientY;
                });

                canvas.addEventListener('mouseup', () => {
                    isMouseDown = false;
                });

                canvas.addEventListener('wheel', (e) => {
                    e.preventDefault();
                    const scale = e.deltaY > 0 ? 1.1 : 0.9;
                    this.camera.position.multiplyScalar(scale);
                });

                // Update camera rotation in animation loop
                this.updateCamera = () => {
                    rotationX += (targetRotationX - rotationX) * 0.05;
                    rotationY += (targetRotationY - rotationY) * 0.05;

                    const radius = this.camera.position.length();
                    this.camera.position.x = radius * Math.sin(rotationY) * Math.cos(rotationX);
                    this.camera.position.y = radius * Math.sin(rotationX);
                    this.camera.position.z = radius * Math.cos(rotationY) * Math.cos(rotationX);

                    this.camera.lookAt(0, 0, 0);
                };
            }

            setupEventListeners() {
                // Car selection
                document.querySelectorAll('.car-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        document.querySelector('.car-btn.active').classList.remove('active');
                        e.target.classList.add('active');
                        this.currentCar = e.target.dataset.car;
                        this.loadCarModel();
                    });
                });

                // Color selection
                document.querySelectorAll('.circle').forEach(circle => {
                    circle.addEventListener('click', (e) => {
                        document.querySelector('.circle.active').classList.remove('active');
                        e.target.classList.add('active');
                        this.currentColor = e.target.dataset.color;
                        this.changeCarColor();
                    });
                });
            }

            async loadCarModel() {
                if (this.isLoading) return;
                this.isLoading = true;
                
                const loading = document.getElementById('loading');
                loading.style.display = 'block';

                try {
                    // Remove existing car model
                    if (this.carModel) {
                        this.scene.remove(this.carModel);
                    }

                    // Try to load GLB model first, fallback to demo model
                   const modelPath = `images/cars/${this.currentCar}/source/model.glb`;
                // const modelPath = 'images/cars/car1/source/model.glb';
                    
                    if (typeof THREE.GLTFLoader !== 'undefined') {
                        // Try loading actual GLB file
                        const loader = new THREE.GLTFLoader();
                        
                        loader.load(
                            modelPath,
                            (gltf) => {
                                this.carModel = gltf.scene;
                                this.carModel.scale.set(1, 1, 1); // Adjust scale as needed
                                
                                // Find parts that should change color
                                this.carParts = [];
                                this.carModel.traverse((child) => {
                                    if (child.isMesh && child.material) {
                                        // Add meshes that should change color (you may need to adjust this logic)
                                        if (child.material.name && 
                                            (child.material.name.toLowerCase().includes('paint') || 
                                             child.material.name.toLowerCase().includes('body') ||
                                             child.material.name.toLowerCase().includes('car'))) {
                                            this.carParts.push(child);
                                        } else if (!child.material.name) {
                                            // If no material name, assume it's a paintable part
                                            this.carParts.push(child);
                                        }
                                    }
                                });
                                
                                this.scene.add(this.carModel);
                                loading.style.display = 'none';
                                this.isLoading = false;
                                this.changeCarColor();
                            },
                            (progress) => {
                                // Optional: show loading progress
                                const percent = Math.round((progress.loaded / progress.total) * 100);
                                loading.textContent = `Loading... ${percent}%`;
                            },
                            (error) => {
                                console.log('GLB file not found, using demo model:', error);
                                this.createDemoCarModel();
                                loading.style.display = 'none';
                                this.isLoading = false;
                                this.changeCarColor();
                            }
                        );
                    } else {
                        // Fallback to demo model if GLTFLoader not available
                        this.createDemoCarModel();
                        loading.style.display = 'none';
                        this.isLoading = false;
                        this.changeCarColor();
                    }

                } catch (error) {
                    console.error('Error loading car model:', error);
                    this.createDemoCarModel();
                    loading.style.display = 'none';
                    this.isLoading = false;
                    this.changeCarColor();
                }
            }

            createDemoCarModel() {
                // Create a simple car-like geometry for demonstration
                const carGroup = new THREE.Group();

                // Car body
                const bodyGeometry = new THREE.BoxGeometry(4, 1, 2);
                const bodyMaterial = new THREE.MeshPhongMaterial({ color: this.colorMap[this.currentColor] });
                const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
                body.position.y = 0.5;
                carGroup.add(body);

                // Car roof
                const roofGeometry = new THREE.BoxGeometry(2.5, 0.8, 1.8);
                const roofMaterial = new THREE.MeshPhongMaterial({ color: this.colorMap[this.currentColor] });
                const roof = new THREE.Mesh(roofGeometry, roofMaterial);
                roof.position.y = 1.4;
                carGroup.add(roof);

                // Wheels
                const wheelGeometry = new THREE.CylinderGeometry(0.4, 0.4, 0.3, 16);
                const wheelMaterial = new THREE.MeshPhongMaterial({ color: 0x333333 });
                
                const positions = [
                    { x: -1.3, y: 0, z: 1.2 },
                    { x: 1.3, y: 0, z: 1.2 },
                    { x: -1.3, y: 0, z: -1.2 },
                    { x: 1.3, y: 0, z: -1.2 }
                ];

                positions.forEach(pos => {
                    const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);
                    wheel.position.set(pos.x, pos.y, pos.z);
                    wheel.rotation.z = Math.PI / 2;
                    carGroup.add(wheel);
                });

                // Store references to parts that can change color
                this.carParts = [body, roof];
                this.carModel = carGroup;
                this.scene.add(this.carModel);
            }

            changeCarColor() {
                if (!this.carModel || !this.carParts) return;

                const color = new THREE.Color(this.colorMap[this.currentColor]);
                this.carParts.forEach(part => {
                    part.material.color = color;
                });
            }

            onWindowResize() {
                const container = document.querySelector('.car-display');
                this.camera.aspect = container.clientWidth / container.clientHeight;
                this.camera.updateProjectionMatrix();
                this.renderer.setSize(container.clientWidth, container.clientHeight);
            }

            animate() {
                requestAnimationFrame(() => this.animate());
                
                if (this.updateCamera) {
                    this.updateCamera();
                }

                this.renderer.render(this.scene, this.camera);
            }
        }

        // Initialize the 3D car viewer when the page loads
        window.addEventListener('load', () => {
            new Car3DViewer();
        });
    </script>
</body>
</html>